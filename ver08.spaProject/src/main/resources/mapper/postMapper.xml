<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spaProject.dao.PostMapper">

	<resultMap type="Post" id="postResultMap">
		<result column="postCode" property="post_code"/>
		<result column="cateCode" property="cate_code"/>
		<result column="postEmail" property="post_email"/>
		<result column="postName" property="post_name"/>
		<result column="postContents" property="post_contents"/>
		<result column="postView" property="post_view"/>
		<result column="postRegDate" property="post_reg_date"/>
		<result column="postModifyDate" property="post_modify_date"/>
	</resultMap>
	
	<!-- 좋아요 취소 -->
	<delete id="delPostLike" parameterType="Post">
		DELETE FROM 
			post_like 
		WHERE  
			post_code = #{postCode}
		AND
			like_email = #{userEmail};
	</delete>
	
	<!-- 좋아요 등록 -->
	<insert id="addPostLike" parameterType="Post">
		INSERT INTO post_like
		(post_code
		,like_email
		,like_reg_date
		)VALUES(
		#{postCode}
		,#{userEmail}
		,NOW());
	</insert>
	
	<!-- 중복 좋아요 체크 -->
	<select id="likeCheck" parameterType="Post" resultType="int">
		SELECT 
			count(1)
		FROM 
			post_like
		WHERE
			post_code = #{postCode}
		AND
			like_email = #{userEmail};
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="commentDelete" parameterType="String">
	DELETE FROM comment AS c WHERE c.comment_code = #{commentCode};
	</delete>
	
	<!-- 댓글 등록 -->
	<insert id="addComment" parameterType="Comment">
		INSERT INTO comment
		(
		comment_code
		,post_code
		,comment_writer
		,comment
		,comment_reg_date
		)VALUES(
		#{commentCode}
		,#{postCode}
		,#{commentWriter}
		,#{comment}
		,NOW());
	</insert>
	
	<!-- 댓글코드 최대값 가져오기 -->
	<select id="getMaxCommentCode" resultType="int">
		SELECT
			MAX(c.comment_code)
		FROM
		comment AS c
	</select>
	
	<!-- 좋아요 갯수 가져오기 -->
	<select id="likeBtnNum" parameterType="Post" resultType="int">
		SELECT
			COUNT(1)
		FROM
			post_like
		WHERE
			post_code = #{postCode};
	</select>

	<!-- 조회수 +1 -->
	<update id="addViewNum" parameterType="map">
		UPDATE post
		SET
			post_view = ${viewNum}
		WHERE 
			post.post_code = #{postCode};
	</update>
	
	<!-- 조회수 가져오기 -->
	<select id="getViewNum" parameterType="String" resultType="int">
		SELECT 
			post_view
		FROM 
			post AS p
		WHERE
			p.post_code = #{postCode};		
	</select>

	<!-- 게시글 댓글 가져오기-->
	<select id="getComment" parameterType="String" resultType="Map">
		SELECT 
			c.comment_writer	AS commentWriter
			,c.comment_code		AS commentCode
			,c.post_code		AS postCode
			,u.user_name		AS userName
			,c.comment			AS comment
			,c.comment_reg_date	AS commentRegDate
		FROM 
			comment AS c
		RIGHT JOIN
			post AS p ON c.post_code = p.post_code
		INNER JOIN
			user AS u ON c.comment_writer = u.user_email
		WHERE
			p.post_code = #{postCode}
		ORDER BY c.comment_reg_date DESC;
	</select>
	
	<!-- 다음글 가져오기 -->
	<select id="nextPost" parameterType="String" resultType="map">
		SELECT
			p.post_code
			,p.post_name
		from
			post AS p
		LEFT JOIN
			post_like AS l ON p.post_code = l.post_code
		INNER JOIN
			category AS c ON p.cate_code = c.cate_code
		INNER JOIN
			user AS u ON p.post_email = u.user_email
		WHERE 
			p.post_code &gt; #{postCode}
		GROUP 
			BY p.post_code
		ORDER BY 
			p.post_code ASC
		LIMIT 1;
	</select>
	
	<!-- 이전글 가져오기 -->
	<select id="previousPost" parameterType="String" resultType="map">
		SELECT
			p.post_code
			,p.post_name
		from
			post AS p
		LEFT JOIN
			post_like AS l ON p.post_code = l.post_code
		INNER JOIN
			category AS c ON p.cate_code = c.cate_code
		INNER JOIN
			user AS u ON p.post_email = u.user_email
		WHERE 
			p.post_code &lt; #{postCode}
		GROUP 
			BY p.post_code
		ORDER BY 
			p.post_code DESC
		LIMIT 1;
	</select>

	<!-- 게시글 상세 -->
	<select id="getPostDetail" parameterType="String" resultType="Map">
		SELECT 
			p.post_code			AS postCode
			,p.cate_code		AS cateCode
			,u.user_name		AS userName
			,p.post_name		AS postName
			,p.post_contents	AS postContents
			,p.post_reg_date	AS postRegDate
			,p.post_modify_date	AS postModifyDate
		FROM 
			post AS p
		INNER JOIN
			user AS u ON p.post_email = u.user_email
		WHERE
			p.post_code = #{postCode};
	</select>
	
	<!-- 게시글 수정 -->
	<update id="postModify" parameterType="Post">
		UPDATE post
		SET
			cate_code=#{cateCode}
			,post_name=#{postName}
			,post_contents=#{postContents}
			,post_modify_date=NOW()
		WHERE 
			post_code=#{postCode};
	</update>

	<!-- 게시글 등록 -->
	<insert id="addPost" parameterType="Post">
		INSERT INTO post
			(post_code
			,cate_code
			,post_email
			,post_name
			,post_contents
			,post_view
			,post_reg_date
			,post_modify_date
			)VALUES(
				NULL
				,#{cateCode}
				,#{postEmail}
				,#{postName}
				,#{postContents}
				,0
				,NOW()
				,NULL
			);
	</insert>
	
	<!-- 댓글 수 가져오기 -->
	<select id="getCommentNum" resultType="String" parameterType="String">
		SELECT
			COUNT(c.post_code) AS comnum
		FROM
			post AS p
		LEFT JOIN
			comment AS c ON p.post_code = c.post_code
		WHERE
			p.post_code = #{postCode};
	</select>

	<!-- 게시글 목록 가져오기 -->
	<select id="getPostList" resultType="Map" parameterType="Pagination">
		SELECT
			p.post_code
			,p.post_view
			,p.post_reg_date
			,p.post_name
			,COUNT(l.post_code) AS like_num
			,c.cate_name
			,u.user_name
		from
			post AS p
		LEFT JOIN
			post_like AS l ON p.post_code = l.post_code
		INNER JOIN
			category AS c ON p.cate_code = c.cate_code
		INNER JOIN
			user AS u ON p.post_email = u.user_email
		<choose>
			<when test="conditions == 'postName' and value != null and value != ''">
				WHERE p.post_name LIKE CONCAT('%',#{value},'%')
			</when>
			<when test="conditions == 'userName' and value != null and value != ''">
				WHERE u.user_name LIKE CONCAT('%',#{value},'%')
			</when>
			<when test="conditions != null and conditions != ''">
				WHERE c.cate_code = #{conditions}
			</when>
			<when test="value != null and value != ''">
				WHERE u.user_email = #{value}
			</when>
		</choose>	
		GROUP BY p.post_code
		<choose>
			<when test="sequence == null or sequence == ''">
				ORDER BY p.post_code DESC
			</when>
			<when test="sequence == 'postView'">
				ORDER BY p.post_view DESC
						,p.post_reg_date DESC
			</when>
			<when test="sequence == 'postLike'">
				ORDER BY like_num DESC
						,p.post_reg_date DESC
			</when>
		</choose>
		LIMIT #{rowStart},#{rowPerPage};
	</select>
	
	<!-- 총갯수 가져오기 -->
	<select id="getPostCount" resultType="int" parameterType="Pagination">
		SELECT
			count(1)
		FROM
			post AS p
		INNER JOIN
			category AS c ON p.cate_code = c.cate_code
		INNER JOIN
			user AS u ON p.post_email = u.user_email
		<choose>
			<when test="conditions == 'postName' and value != null and value != ''">
				WHERE p.post_name LIKE CONCAT('%',#{value},'%')
			</when>
			<when test="conditions == 'userName' and value != null and value != ''">
				WHERE u.user_name LIKE CONCAT('%',#{value},'%')
			</when>
			<when test="conditions != null and conditions != ''">
				WHERE c.cate_code = #{conditions}
			</when>
			<when test="value != null and value != ''">
				WHERE u.user_email = #{value}
			</when>
		</choose>
	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="postDelete" parameterType="String">
		DELETE FROM post WHERE post_code = #{postCode};
	</delete>
	
</mapper>